import{XtalInsertJson}from"./xtal-insert-json.js";import{define}from"./node_modules/xtal-latx/define.js";const pass_thru_on_init="pass-thru-on-init";export class XtalJSONMerge extends XtalInsertJson{static get is(){return"xtal-json-merge"}static get observedAttributes(){return super.observedAttributes.concat(["pass-thru-on-init"])}connectedCallback(){this._upgradeProperties(["passThruOnInit"]);super.connectedCallback()}get passThruOnInit(){return this._passThruOnInit}set passThruOnInit(val){this.attr(pass_thru_on_init,val,"")}attributeChangedCallback(name,oldVal,newVal){super.attributeChangedCallback(name,oldVal,newVal);switch(name){case pass_thru_on_init:this._passThruOnInit=null!==newVal;break;}}postLoadJson(mergedObj){if(this._objectsToMerge&&mergedObj){for(let i=0,ii=this._objectsToMerge.length;i<ii;i++){const objToMerge=this._objectsToMerge[i];switch(typeof objToMerge){case"object":this.mergeDeep(mergedObj,objToMerge);break;default:throw"TODO:  error message";}}}this.mergedProp=mergedObj}getParent(){return this.parentElement}mergeDeep(target,source){if("object"!==typeof target)return;if("object"!==typeof source)return;for(const key in source){const sourceVal=source[key],targetVal=target[key];if(!sourceVal)continue;if(!targetVal){target[key]=sourceVal;continue}if(Array.isArray(sourceVal)&&Array.isArray(targetVal)){if(0<targetVal.length&&"undefined"===typeof targetVal[0].id)continue;for(var i=0,ii=sourceVal.length;i<ii;i++){sourceVal[i]}continue}switch(typeof sourceVal){case"object":switch(typeof targetVal){case"object":this.mergeDeep(targetVal,sourceVal);break;default:target[key]=sourceVal;break;}break;default:target[key]=sourceVal;}}return target}}define(XtalJSONMerge);